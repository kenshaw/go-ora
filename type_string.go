// Code generated by "stringer -type=Type -trimprefix=Type"; DO NOT EDIT.

package ora

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TypeNCHAR-1]
	_ = x[TypeNUMBER-2]
	_ = x[TypeSB1-3]
	_ = x[TypeSB2-3]
	_ = x[TypeSB4-3]
	_ = x[TypeFLOAT-4]
	_ = x[TypeNullStr-5]
	_ = x[TypeVarNum-6]
	_ = x[TypeLONG-8]
	_ = x[TypeVARCHAR-9]
	_ = x[TypeROWID-11]
	_ = x[TypeDATE-12]
	_ = x[TypeVarRaw-15]
	_ = x[TypeBFloat-21]
	_ = x[TypeBDouble-22]
	_ = x[TypeRAW-23]
	_ = x[TypeLongRaw-24]
	_ = x[TypeUINT-68]
	_ = x[TypeLongVarChar-94]
	_ = x[TypeLongVarRaw-95]
	_ = x[TypeCHAR-96]
	_ = x[TypeCHARZ-97]
	_ = x[TypeIBFloat-100]
	_ = x[TypeIBDouble-101]
	_ = x[TypeRefCursor-102]
	_ = x[TypeNOT-108]
	_ = x[TypeXMLType-108]
	_ = x[TypeOCIRef-110]
	_ = x[TypeOCIClobLocator-112]
	_ = x[TypeOCIBlobLocator-113]
	_ = x[TypeOCIFileLocator-114]
	_ = x[TypeResultSet-116]
	_ = x[TypeOCIString-155]
	_ = x[TypeOCIDate-156]
	_ = x[TypeTimestampDTY-180]
	_ = x[TypeTimestampTZ_DTY-181]
	_ = x[TypeIntervalYM_DTY-182]
	_ = x[TypeIntervalDS_DTY-183]
	_ = x[TypeTimeTZ-186]
	_ = x[TypeTimestamp-187]
	_ = x[TypeTimestampTZ-188]
	_ = x[TypeIntervalYM-189]
	_ = x[TypeIntervalDS-190]
	_ = x[TypeUROWID-208]
	_ = x[TypeTimestampLTZ_DTY-231]
	_ = x[TypeTimestampLTZ-232]
}

const _Type_name = "NCHARNUMBERSB1FLOATNullStrVarNumLONGVARCHARROWIDDATEVarRawBFloatBDoubleRAWLongRawUINTLongVarCharLongVarRawCHARCHARZIBFloatIBDoubleRefCursorNOTOCIRefOCIClobLocatorOCIBlobLocatorOCIFileLocatorResultSetOCIStringOCIDateTimestampDTYTimestampTZ_DTYIntervalYM_DTYIntervalDS_DTYTimeTZTimestampTimestampTZIntervalYMIntervalDSUROWIDTimestampLTZ_DTYTimestampLTZ"

var _Type_map = map[Type]string{
	1:   _Type_name[0:5],
	2:   _Type_name[5:11],
	3:   _Type_name[11:14],
	4:   _Type_name[14:19],
	5:   _Type_name[19:26],
	6:   _Type_name[26:32],
	8:   _Type_name[32:36],
	9:   _Type_name[36:43],
	11:  _Type_name[43:48],
	12:  _Type_name[48:52],
	15:  _Type_name[52:58],
	21:  _Type_name[58:64],
	22:  _Type_name[64:71],
	23:  _Type_name[71:74],
	24:  _Type_name[74:81],
	68:  _Type_name[81:85],
	94:  _Type_name[85:96],
	95:  _Type_name[96:106],
	96:  _Type_name[106:110],
	97:  _Type_name[110:115],
	100: _Type_name[115:122],
	101: _Type_name[122:130],
	102: _Type_name[130:139],
	108: _Type_name[139:142],
	110: _Type_name[142:148],
	112: _Type_name[148:162],
	113: _Type_name[162:176],
	114: _Type_name[176:190],
	116: _Type_name[190:199],
	155: _Type_name[199:208],
	156: _Type_name[208:215],
	180: _Type_name[215:227],
	181: _Type_name[227:242],
	182: _Type_name[242:256],
	183: _Type_name[256:270],
	186: _Type_name[270:276],
	187: _Type_name[276:285],
	188: _Type_name[285:296],
	189: _Type_name[296:306],
	190: _Type_name[306:316],
	208: _Type_name[316:322],
	231: _Type_name[322:338],
	232: _Type_name[338:350],
}

func (i Type) String() string {
	if str, ok := _Type_map[i]; ok {
		return str
	}
	return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
}
